/* tslint:disable */
/* eslint-disable */
/**
 * AllTheBeans-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoffeeCreateDTO,
  CoffeeResponseDTO,
  CoffeeUpdateDTO,
} from '../models/index';
import {
    CoffeeCreateDTOFromJSON,
    CoffeeCreateDTOToJSON,
    CoffeeResponseDTOFromJSON,
    CoffeeResponseDTOToJSON,
    CoffeeUpdateDTOFromJSON,
    CoffeeUpdateDTOToJSON,
} from '../models/index';

export interface ApiCoffeeIdDeleteRequest {
    id: number;
}

export interface ApiCoffeeIdGetRequest {
    id: number;
}

export interface ApiCoffeeIdPutRequest {
    id: number;
    coffeeUpdateDTO?: CoffeeUpdateDTO;
}

export interface ApiCoffeePostRequest {
    coffeeCreateDTO?: CoffeeCreateDTO;
}

/**
 * 
 */
export class CoffeeApi extends runtime.BaseAPI {

    /**
     */
    async apiCoffeeBeanOfTheDayGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoffeeResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Coffee/bean-of-the-day`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoffeeResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiCoffeeBeanOfTheDayGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoffeeResponseDTO> {
        const response = await this.apiCoffeeBeanOfTheDayGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCoffeeGetAllCoffeeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoffeeResponseDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Coffee/get-all-coffee`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoffeeResponseDTOFromJSON));
    }

    /**
     */
    async apiCoffeeGetAllCoffeeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoffeeResponseDTO>> {
        const response = await this.apiCoffeeGetAllCoffeeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCoffeeIdDeleteRaw(requestParameters: ApiCoffeeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCoffeeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Coffee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCoffeeIdDelete(requestParameters: ApiCoffeeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCoffeeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCoffeeIdGetRaw(requestParameters: ApiCoffeeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoffeeResponseDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCoffeeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Coffee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoffeeResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiCoffeeIdGet(requestParameters: ApiCoffeeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoffeeResponseDTO> {
        const response = await this.apiCoffeeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCoffeeIdPutRaw(requestParameters: ApiCoffeeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoffeeResponseDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCoffeeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Coffee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CoffeeUpdateDTOToJSON(requestParameters['coffeeUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoffeeResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiCoffeeIdPut(requestParameters: ApiCoffeeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoffeeResponseDTO> {
        const response = await this.apiCoffeeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCoffeePostRaw(requestParameters: ApiCoffeePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoffeeResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Coffee`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoffeeCreateDTOToJSON(requestParameters['coffeeCreateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoffeeResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiCoffeePost(requestParameters: ApiCoffeePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoffeeResponseDTO> {
        const response = await this.apiCoffeePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
